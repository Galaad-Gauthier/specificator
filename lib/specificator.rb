require "specificator/version"
require "specificator/expectation/association"
require "specificator/expectation/validator"

module Specificator
  class Error < StandardError; end

  class Generator
    GENERATOR_WATERMARK = "# Generated by Specificator"

    attr_accessor :model_class

    def self.generate_for(model_class)
      new(model_class).generate
    end

    def initialize(model_class)
      @model_class = model_class
    end

    def generate
      return unless valid?

      update_shared_specs!
      update_model_specs!
    rescue
      false
    end

    def valid?
      model_class < ActiveRecord::Base
    end

    private

    def model_name
      model_class.name.underscore
    end

    def update_shared_specs!
      return if already_has_shared_specs?

      File.open(shared_spec_path, 'w') do |file|
        file.write GENERATOR_WATERMARK + "\n"
        file.write shared_examples_for(validators_expectations, "#{model_name.downcase}_validations")
        file.write shared_examples_for(associations_expectations, "#{model_name.downcase}_associations")
        file.write GENERATOR_WATERMARK
      end
    end

    def update_model_specs!
      return if already_has_includers?

      File.open(model_spec_path, 'r+') do |file|
        File.foreach(model_spec_path) do |line|
          file.puts line
          if line =~ /RSpec\.describe/
            file.puts "\n"
            file.puts "\tinclude_examples '#{model_name.downcase}_validations' #{GENERATOR_WATERMARK}"
            file.puts "\tinclude_examples '#{model_name.downcase}_associations' #{GENERATOR_WATERMARK}"
            file.puts "\n"
          end
        end
      end
    end

    def already_has_includers?
      File.read(model_spec_path) =~ /#{GENERATOR_WATERMARK}/
    end

    def already_has_shared_specs?
      File.read(shared_spec_path) =~ /#{GENERATOR_WATERMARK}/
    rescue
      false
    end

    def model_spec_path
      File.join(Rails.root, 'spec', 'models', "#{model_name.downcase}_spec.rb")
    end

    def shared_spec_path
      File.join(Rails.root, 'spec', 'support', "#{model_name.downcase}_shared.rb")
    end

    def validators_expectations
      @validators_expectations ||= model_class.validators.map do |validator|
        Expectation::Validator.for(validator)
      end.flatten.compact
    end

    def associations_expectations
      @associations_expectations ||= model_class.reflect_on_all_associations.map do |association|
        Expectation::Association.for(association)
      end.flatten.compact
    end

    def shared_examples_for(expectations, type)
      <<~EOS
       \nRSpec.shared_examples "#{type}" do
         #{expectations.join("\n  ")}
       end
      EOS
    end
  end
end
